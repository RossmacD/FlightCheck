# Based on the "trust" template v0.1.2
# https://github.com/japaric/trust/tree/v0.1.2

dist: trusty
language: rust
services: docker
sudo: required

# TOD O Rust builds on stable by default, this can be
# overridden on a case by case basis down below.

env:
  global:
    # TOD O Update this to match the name of your project.
    - CRATE_NAME=flightcheck

matrix:
  # TO DO These are all the build jobs. Adjust as necessary. Comment out what you
  # don't need
  include:
    # Linux
    # - env: TARGET=aarch64-unknown-linux-gnu
    # - env: TARGET=arm-unknown-linux-gnueabi
    # - env: TARGET=armv7-unknown-linux-gnueabihf
    # - env: TARGET=i686-unknown-linux-gnu
    # - env: TARGET=i686-unknown-linux-musl
    # - env: TARGET=mips-unknown-linux-gnu
    # - env: TARGET=mips64-unknown-linux-gnuabi64
    # - env: TARGET=mips64el-unknown-linux-gnuabi64
    # - env: TARGET=mipsel-unknown-linux-gnu
    # - env: TARGET=powerpc-unknown-linux-gnu
    # - env: TARGET=powerpc64-unknown-linux-gnu
    # - env: TARGET=powerpc64le-unknown-linux-gnu
    # - env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1
    - env: TARGET=x86_64-unknown-linux-gnu
    # - env: TARGET=x86_64-unknown-linux-musl

    # OSX
    # - env: TARGET=i686-apple-darwin
    #   os: osx
    - env: TARGET=x86_64-apple-darwin
      os: osx

    # Windows
    - env: TARGET=x86_64-pc-windows-gnu

before_install:
  - set -e
  - rustup self update

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

script:
  - bash ci/script.sh

after_script: set +e

before_deploy:
  - sh ci/before_deploy.sh

deploy:
  # TOD O update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt 
  # - Paste the output down here
  api_key:
    secure: Geboj5S57OQeUy78tJOcUBa1DECVEcP2bWgxYUf0ENvXC50rbVyrLsaCPncnUSFyzQXxjTfFSlR/Q3PgxNz+E2N28GHCmVqg29I1vnyNPBab3uDC45jHFBJiOJek8oIpmsDiBPWk0i6aGelWxvkghqtjrvdj0pQc2JVsan508q0IHPkuqhknslvf/CObfpabH/wknZI1l/3/bkxEnUYmYl0Oo7brqWy4erEpASQwqGg/aSx3VLDQXAen+OAEIaKghtREYjCk6BeGnkQNyLEK7Y2P088L8cM0/ZCPbublkrnNGTu6whfnYu8o3FvnptwEQFPtM/fX2d/zaAMpmXedHkXt/j4t6BByFZUqs+HttuiKKF6PIW+ZbfbPvY003WKCG7eILCyJh7MMsxBs9hlXqKzDjCY98ZdnvzSk9nHgaGUD+T7MFLFamNpZGymct4b1WmH7w55/ZCrghgq5yNiT2ThlA5FktC3yLqzNSpPymwhIWpU85yvlD40uEPh+Gxt57l4Pahft6KWEEZA5h3/OaSKS7rJl6GZE9PKM+vHGPRm7GHgTtZpayi5VG4NvIHq5A8S8Jzv/6SQv2O/PN8a4t0kRvBvTOxecm/Ht4BGrfcVuJP0vFY612aINGT12WD6joHUEl2UPI0IqnS26LUlqNg33VIeY2mfm9V8x23KwBX4=
  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  on:
    # TOD O Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true
  provider: releases
  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never
